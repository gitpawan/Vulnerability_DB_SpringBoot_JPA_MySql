package com.vulboot.angulardemo.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.vulboot.angulardemo.model.VulData;
import com.vulboot.angulardemo.service.VulDataService;

@RestController
@RequestMapping("/api2")
public class VulDataController {
	@Autowired
	private VulDataService vulDataService;
	
	public VulDataController(VulDataService vulDataService) {
		this.vulDataService=vulDataService;
	}
	
	@RequestMapping(value = "vulData", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<VulData> getAllVulDatas() {
		return vulDataService.findAll();
	}
	
	@RequestMapping(value = "vulData", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<VulData> createVulData(@RequestBody VulData vulData) throws URISyntaxException {
		try {
			VulData result = vulDataService.save(vulData);
			return ResponseEntity.created(new URI("/api2/vulData/" + result.getId())).body(result);
		} catch (EntityExistsException e) {
			return new ResponseEntity<VulData>(HttpStatus.CONFLICT);
		}
	}
	
	@RequestMapping(value = "vulData", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<VulData> updateVulData(@RequestBody VulData vulData) throws URISyntaxException {
		if (vulData.getId() == null) {
			return new ResponseEntity<VulData>(HttpStatus.NOT_FOUND);
		}

		try {
			VulData result = vulDataService.update(vulData);
			return ResponseEntity.created(new URI("/api2/vulData/" + result.getId())).body(result);
		} catch (EntityNotFoundException e) {
			return new ResponseEntity<VulData>(HttpStatus.NOT_FOUND);
		}
	}
	
	@RequestMapping(value = "/vulData/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> deleteVulData(@PathVariable Integer id) {
		vulDataService.delete(id);

		return ResponseEntity.ok().build();
	}
}
